=pod

=head1 NAME

Data::Path - Perl extension for XPath like accessing from complex data structs

=head1 SYNOPSIS

  use Data::Path ();

  my $hashdata = {
    result => {
      msg => [
        { text => 'msg0' },
        { text => 'msg1' },
        { text => 'msg2' }
      ]
    },
    method => sub { 'method text' }
  };

  my $hpath = Data::Path->new( $hashdata );

  my $value  = $hpath->get( '/result/msg[1]/text' );
  my $value2 = $hpath->get( '/method()' );

  print "OK" if $value eq 'msg1';
  print "OK" if $value2 eq 'method text';

  my $hpath = Data::Path->new( $hashdata, $callback );

=head1 DESCRIPTION

XPath like access to get values from a complex data structs.

C<key_does_not_exist> / C<index_does_not_exist> are only called if it was not
the last part of the path.  If the last part of path is not exists C<undef>
is returned.

=head2 CALLBACKs

The default callbacks but you can overwrite them.

  {
    key_does_not_exist => sub {
      my ($data, $key, $index, $value, $rest ) = @_;
      croak "key $key does not exists\n";
    },
    index_does_not_exist => sub {
      my ($data, $key, $index, $value, $rest ) = @_;
      croak "key $key\[$index\] does not exists\n";
    },
    retrieve_index_from_non_array => sub {
      my ($data, $key, $index, $value, $rest ) = @_;
      croak "trie to retrieve an index $index from a no array value (in key $key)\n";
    }, retrieve_key_from_non_hash => sub {
      my ($data, $key, $index, $value, $rest ) = @_;
      croak "trie to retrieve a key from a no hash value (in key $key)\n";
    },
    not_a_coderef_or_method  => $callback->{not_a_coderef_or_method} ||
    sub {
      my ($data, $key, $index, $value, $rest )=@_;
      croak "tried to retrieve from a non-existant coderef or method";
    }
  }

=head2 EXMAPLE overwrite callback

  my $hpath = Data::Path->new(
    $hashdata,
    {
      key_does_not_exist => sub { die "key not found\n" },
      index_does_not_exist => sub { die "index not found\n" }
    }
  );

=head1 SEE ALSO

=over

=item * L<Data::DPath>

=item * L<Data::Nested>

=item * L<Data::PathSimple>

=item * L<Data::SPath>

=item * L<Data::SimplePath>

=back

=head1 TODO

Slices of data through /foo[*]/bar syntax. eg. retrieve all the bar keys
from each element of the foo array.

=head1 AUTHOR

Marco Schrieck, <marco.schrieck@gmx.de>

Jeremy Wall, <jeremy@marzhillstudios.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2006 by Marco Schrieck
Copyright (C) 2007 by Jeremy Wall

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.4 or,
at your option, any later version of Perl 5 you may have available.

=cut
